#include <stdio.h>

struct router
{
    unsigned cost[20];
    unsigned from[20];
} routingTable[10];

int main()
{
    int costmat[20][20];
    int routers, i, j, k, count = 0;
    
    // Input the number of routers
    printf("\nEnter the number of routers: ");
    scanf("%d", &routers);
    
    // Input the cost matrix
    printf("\nEnter the cost matrix: \n");
    for (i = 0; i < routers; i++) {
        for (j = 0; j < routers; j++) {
            scanf("%d", &costmat[i][j]);
            if (i != j && costmat[i][j] == 0) {
                costmat[i][j] = 999; // Assuming 999 as infinity
            }
            routingTable[i].cost[j] = costmat[i][j];
            routingTable[i].from[j] = j;
        }
    }

    int otherShorterPathExists;
    do {
        otherShorterPathExists = 0;
        for (i = 0; i < routers; i++) {
            for (j = 0; j < routers; j++) {
                for (k = 0; k < routers; k++) {
                    if (routingTable[i].cost[j] > routingTable[i].cost[k] + routingTable[k].cost[j]) {
                        routingTable[i].cost[j] = routingTable[i].cost[k] + routingTable[k].cost[j];
                        routingTable[i].from[j] = k;
                        otherShorterPathExists = 1;
                    }
                }
            }
        }
    } while (otherShorterPathExists != 0);

    // Printing the routing table
    for (i = 0; i < routers; i++) {
        printf("\n\nFor Router %d\n", i + 1);
        for (j = 0; j < routers; j++) {
            printf("\t\nRouter %d via %d distance %d ", j + 1, routingTable[i].from[j] + 1, routingTable[i].cost[j]);
        }
    }
    printf("\n\n");
    return 0;
}
