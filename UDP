UDP Client

#include <stdio.h>
#include <netdb.h>
#include <netinet/in.h>
#include <stdlib.h>
#include <string.h>
#include <sys/socket.h>
#include <sys/types.h>
#include <unistd.h>

#define MAX 80
#define PORT 8081
#define SA struct sockaddr
void func(int connfd)
{
    char buff[MAX];
    int n;
    for (;;)
    {
        bzero(buff, MAX);
        read(connfd, buff, sizeof(buff));
        printf("From Client: %sTo Client : ", buff);
        bzero(buff, MAX);
        n = 0;
        while ((buff[n++] = getchar()) != '\n')
            ;
        write(connfd, buff, sizeof(buff));
        // if msg contains "Exit" then server exit and chat ended.
        if (strncmp("exit", buff, 4) == 0)
        {
            printf("Server Exit...\n");
            break;
        }
    }
}
int main()
{
    int sockfd, connfd, len;
    struct sockaddr_in servaddr, cli;
    sockfd = socket(AF_INET, SOCK_STREAM, 0);
    if (sockfd == -1)
    {
        printf("socket creation failed...\n");
        exit(0);
    }
    else
        printf("Socket successfully created..\n");
    bzero(&servaddr, sizeof(servaddr));
    servaddr.sin_family = AF_INET;
    servaddr.sin_addr.s_addr = htonl(INADDR_ANY);
    servaddr.sin_port = htons(PORT);
    if ((bind(sockfd, (SA *)&servaddr, sizeof(servaddr))) != 0)
    {
        printf("socket bind failed...\n");
        exit(0);
    }
    else
        printf("Socket successfully binded..\n");
    if ((listen(sockfd, 5)) != 0)
    {
        printf("Listen failed...\n");
        exit(0);
    }
    else
        printf("Server listening..\n");
    len = sizeof(cli);
    connfd = accept(sockfd, (SA *)&cli, &len);
    if (connfd < 0)
    {
        printf("Server Sccept Failed...\n");
        exit(0);
    }
    else
        printf("Server Accept the Client...\n");
    func(connfd);
    close(sockfd);
}

UDP Server

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <netdb.h>
#include <sys/socket.h>
#include <stdlib.h>
#include <string.h>
#include <arpa/inet.h>

void main()
{
    int server;
    struct sockaddr_in servAddr,client_addr;
    char servMsg[2000],cliMsg[2000];
    int client_struct_length=sizeof(client_addr);
    server=socket(AF_INET,SOCK_DGRAM,IPPROTO_UDP);
    if(server<0)
    {
        printf("Error while creating socket...\n");
        exit(1);
    }
    printf("Socket created successfully..\n");
    servAddr.sin_addr.s_addr=inet_addr("127.0.0.1");
    servAddr.sin_family=AF_INET;
    servAddr.sin_port=htons(7000);
    if((bind(server,(struct sockaddr*)&servAddr,sizeof(servAddr))<0))
    {
        printf("couldn't bind to port...\n");
        exit(1);
    }
    printf("Binding Done...\n");
    printf("Listening...\n");
    if((recvfrom(server,cliMsg,sizeof(cliMsg),0,(struct sockaddr*)&client_addr,&client_struct_length)<0))
    {
        printf("Couldn't recieve...\n");
        exit(1);
    }
    printf("Msg from client: %s",cliMsg);
    strcpy(servMsg,cliMsg);
    if(sendto(server,servMsg,strlen(servMsg),0,(struct sockaddr*)&client_addr,client_struct_length)<0)
    {
        printf("Can't send...\n");
        exit(1);
    }
    close(server);
}
